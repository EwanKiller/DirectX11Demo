// D3D实用工具集

#ifndef D3DUTIL_H
#define D3DUTIL_H

#include<d3d11_1.h> // 已包含Windows.h
#include<DirectXCollision.h> // 已包含DirectXMath.h
#include<DirectXPackedVector.h>
#include<DirectXColors.h>
#include<d3dcompiler.h>
#include<vector>
#include<string>

// 宏相关

// 默认开启图形调试器具名化
// 如果不需要该功能，可通过全局文本替换将其值设置为0
#ifndef GRAPHICS_DEBUGGER_OBJECT_NAME
#define GRAPHICS_DEBUGGER_OBJECT_NAME (1)
#endif 

// 安全COM组件释放宏
#define SAFE_RELEASE(p){if((p)){(p)->Release();(p)=nullptr;}}

// D3D11SetDebugObjectName函数
//----------------------------
// 为D3D设备创建出来的对象在图形调试器中设置对象名
// [In] ID3D11DeviceChild D3D11设备创建出的对象
// [In] name 对象名
template<UINT TNameLength>
inline void D3D11SetDebugObjectName(_In_ ID3D11DeviceChild* resource, _In_ const char(&name)[TNameLength])
{
#if (defined(DEBUG) || defined(_DEBUG)) && (GRAPHICS_DEBUGGER_OBJECT_NAME)
	resource->SetPrivateData(WKPDID_D3DDebugObjectName, TNameLength - 1, name);
#else
	UNREFERENCED_PARAMETER(resource);
	UNREFERENCED_PARAMETER(name);
#endif
}

// DXGISetDebugObjectName函数
// 为DXGI对象在图形调试器中设置对象名
// [In]IDXGIObject DXGI对象
// [In]name 对象名
template<UINT TNameLength>
inline void DXGISetDebugObjectName(_In_ IDXGIObject* resource, _In_ const char(&name)[TNameLength])
{
#if (defined(DEBUG) || defined(_DEBUG))&&(GRAPHICS_DEBUGGER_OBJECT_NAME)
	resource->SetPrivateData(WKPDID_D3DDebugObjectName, TNameLength - 1, name);
#else
	UNREFERENCED_PARAMETER(resource);
	UNREFERENCED_PARAMETER(name);
#endif
}

// 着色器编译相关函数
//
/*
	CreateShaderFromFile()
-----------------------------
	[csoFileName] 编译好的着色器二进制文件（.cso)
	[hlslFileName] 着色器代码
	[entryPoint] 入口点
	[shaderModel] 着色器模型 格式为"*s_5_0" * 可以为c,b,g,h,p,v 之一
	[out-ppBlobOut] 输出着色器二进制文件
*/
HRESULT CreateShaderFromFile(
	const WCHAR* csoFileName,
	const WCHAR	* hlslFileName,
	LPCSTR entryPoint,
	LPCSTR shaderModel,
	ID3DBlob** ppBlobOut
);
#endif // !D3DUTIL_H


